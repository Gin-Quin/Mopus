{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"pro",
				"processExports\twarning"
			],
			[
				"modl",
				"modulePath\tconst"
			],
			[
				"ex",
				"existsSync\twarning"
			],
			[
				"glo",
				"globalModule\tlet"
			],
			[
				"de",
				"dependency\tparameter"
			],
			[
				"depe",
				"dependencies\tlet"
			],
			[
				"all",
				"allDependencies\twarning"
			],
			[
				"dep",
				"dependenciesArray\tmethod"
			],
			[
				"fol",
				"folderPath\tparameter"
			],
			[
				"entry",
				"entryAsModule\twarning"
			],
			[
				"input",
				"inputAsModule\twarning"
			],
			[
				"inde",
				"indentLevel\twarning"
			],
			[
				"proj",
				"projects\tproperty"
			],
			[
				"outpu",
				"outputDir\twarning"
			],
			[
				"arg",
				"argv\twarning"
			],
			[
				"folder",
				"folderRules\tproperty"
			],
			[
				"fold",
				"folderRules\twarning"
			],
			[
				"glob",
				"globToPattern\tconst"
			],
			[
				"fil",
				"filePatterns\twarning"
			],
			[
				"true",
				"truePath\tparameter"
			],
			[
				"modul",
				"moduleNotFound\twarning"
			],
			[
				"location",
				"locationError\tfunction"
			],
			[
				"mod",
				"moduleNotFound\twarning"
			],
			[
				"ou",
				"outputDir"
			],
			[
				"ins",
				"instance"
			],
			[
				"file",
				"fileName"
			],
			[
				"for",
				"forEach"
			],
			[
				"test",
				"testFolderA"
			],
			[
				"is",
				"isGlobalModule"
			],
			[
				"con",
				"configFile"
			],
			[
				"default",
				"defaultOptions"
			],
			[
				"fodl",
				"folderRules"
			],
			[
				"defa",
				"defaultFolderAction"
			],
			[
				"targ",
				"targetFile"
			],
			[
				"output",
				"outputString"
			],
			[
				"write",
				"writeToStream"
			],
			[
				"wri",
				"writeToString"
			],
			[
				"stat",
				"statements"
			],
			[
				"st",
				"statements"
			],
			[
				"state",
				"statements"
			],
			[
				"has",
				"hasClassFields"
			],
			[
				"trim",
				"trimEnd"
			],
			[
				"return",
				"returnValue"
			],
			[
				"retu",
				"returnValue"
			],
			[
				"tur",
				"truePath"
			],
			[
				"tre",
				"truePath"
			],
			[
				"entr",
				"entry"
			],
			[
				"mop",
				"mopusTemplate"
			],
			[
				"depen",
				"dependency"
			],
			[
				"wrap",
				"wrapIIFE"
			],
			[
				"pre",
				"processRequires"
			],
			[
				"modu",
				"moduleName"
			],
			[
				"md",
				"moduleContent"
			],
			[
				"m",
				"moduleName"
			],
			[
				"mo",
				"moduleContent"
			],
			[
				"module",
				"moduleName"
			],
			[
				"proc",
				"processClassFields"
			],
			[
				"spe",
				"specifier"
			],
			[
				"ent",
				"entry"
			],
			[
				"en",
				"entry"
			],
			[
				"os",
				"osPath"
			],
			[
				"VariableD",
				"VariableDeclaration"
			],
			[
				"del",
				"declaration"
			],
			[
				"proje",
				"project"
			],
			[
				"pr",
				"projects"
			],
			[
				"new",
				"newModule"
			],
			[
				"add",
				"addDependencies"
			],
			[
				"depend",
				"dependencies"
			],
			[
				"from",
				"fromProject"
			],
			[
				"node",
				"nodeModules"
			],
			[
				"no",
				"nodeModulePath"
			],
			[
				"confi",
				"configFile"
			],
			[
				"conf",
				"configFile"
			],
			[
				"res",
				"resolvePath"
			],
			[
				"raw",
				"rawContent"
			],
			[
				"genera",
				"generateModuleFragments"
			],
			[
				"requi",
				"requireNodes"
			],
			[
				"prop",
				"properties"
			],
			[
				"Objec",
				"ObjectExpression"
			],
			[
				"form",
				"formatBinaryExpressionPart"
			],
			[
				"exp",
				"expressionNeedsParenthesis"
			],
			[
				"define",
				"defineProperties"
			],
			[
				"cons",
				"constructorMethod"
			],
			[
				"static",
				"StaticField"
			],
			[
				"fiel",
				"fieldType"
			],
			[
				"in",
				"indent"
			],
			[
				"ep",
				"emptyBlockStatement"
			],
			[
				"nu",
				"nullParser"
			],
			[
				"cno",
				"constructorNode"
			],
			[
				"const",
				"constructor"
			],
			[
				"Fie",
				"FieldDefinition"
			],
			[
				"le",
				"length"
			],
			[
				"as",
				"astWalkHandler"
			],
			[
				"class",
				"classFieldsPlugin"
			],
			[
				"pars",
				"Parser"
			],
			[
				"clas",
				"classFields"
			],
			[
				"fll",
				"fullPath"
			],
			[
				"moduel",
				"moduleName"
			],
			[
				"projec",
				"projectOptions"
			],
			[
				"mini",
				"minify"
			],
			[
				"dependen",
				"dependency"
			],
			[
				"minif",
				"minifier"
			],
			[
				"out",
				"outputOsPath"
			],
			[
				"outp",
				"outputOsPath"
			],
			[
				"tru",
				"truePath"
			],
			[
				"bind",
				"bindPrototype"
			],
			[
				"e",
				"exportValues"
			],
			[
				"export",
				"exportValues"
			],
			[
				"Import",
				"ImportFragment"
			],
			[
				"mopus",
				"MopusModules"
			],
			[
				"syn",
				"syntaxError"
			],
			[
				"fel",
				"filePath"
			],
			[
				"dir",
				"dirPath"
			],
			[
				"end",
				"endOfStatement"
			],
			[
				"str",
				"strToExec"
			],
			[
				"sta",
				"startOfModule"
			],
			[
				"las",
				"lastInput"
			],
			[
				"Exp",
				"ExportExpressions"
			],
			[
				"mdo",
				"modulePath"
			],
			[
				"defaul",
				"defaultExpression"
			],
			[
				"Export",
				"ExportFragment"
			],
			[
				"import",
				"importFrom"
			],
			[
				"impo",
				"importFrom"
			],
			[
				"act",
				"actionResult"
			],
			[
				"parse",
				"parseImport"
			],
			[
				"Parse",
				"parseImport"
			],
			[
				"osF",
				"osFilePath"
			],
			[
				"rea",
				"readFileSync"
			]
		]
	},
	"buffers":
	[
		{
			"file": "transform-class-properties/main.js",
			"settings":
			{
				"buffer_size": 4510,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "package/modules/astring/generator.js",
			"settings":
			{
				"buffer_size": 24475,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "transform-class-properties/test.js",
			"settings":
			{
				"buffer_size": 119,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "tests/cocu.js",
			"settings":
			{
				"buffer_size": 839,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "tests/Hero.js",
			"settings":
			{
				"buffer_size": 1309,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "tests/mopus.json",
			"settings":
			{
				"buffer_size": 168,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "package/src/Project.js",
			"settings":
			{
				"buffer_size": 6294,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "package/src/Module.js",
			"settings":
			{
				"buffer_size": 4537,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "package/src/astHandler.js",
			"settings":
			{
				"buffer_size": 6255,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"contents": "// Astring is a tiny and fast JavaScript code generator from an ESTree-compliant AST.\n//\n// Astring was written by David Bonnet and released under an MIT license.\n//\n// The Git repository for Astring is available at:\n// https://github.com/davidbonnet/astring.git\n//\n// Please use the GitHub bug tracker to report issues:\n// https://github.com/davidbonnet/astring/issues\n\nconst { stringify } = JSON\n\n/* istanbul ignore if */\nif (!String.prototype.repeat) {\n\t/* istanbul ignore next */\n\tthrow new Error(\n\t\t'String.prototype.repeat is undefined, see https://github.com/davidbonnet/astring#installation'\n\t)\n}\n\n/* istanbul ignore if */\nif (!String.prototype.endsWith) {\n\t/* istanbul ignore next */\n\tthrow new Error(\n\t\t'String.prototype.endsWith is undefined, see https://github.com/davidbonnet/astring#installation'\n\t)\n}\n\nconst OPERATOR_PRECEDENCE = {\n\t'||': 3,\n\t'&&': 4,\n\t'|': 5,\n\t'^': 6,\n\t'&': 7,\n\t'==': 8,\n\t'!=': 8,\n\t'===': 8,\n\t'!==': 8,\n\t'<': 9,\n\t'>': 9,\n\t'<=': 9,\n\t'>=': 9,\n\tin: 9,\n\tinstanceof: 9,\n\t'<<': 10,\n\t'>>': 10,\n\t'>>>': 10,\n\t'+': 11,\n\t'-': 11,\n\t'*': 12,\n\t'%': 12,\n\t'/': 12,\n\t'**': 13,\n}\n\n// Enables parenthesis regardless of precedence\nconst NEEDS_PARENTHESES = 17\n\nconst EXPRESSIONS_PRECEDENCE = {\n\t// Definitions\n\tArrayExpression: 20,\n\tTaggedTemplateExpression: 20,\n\tThisExpression: 20,\n\tIdentifier: 20,\n\tLiteral: 18,\n\tTemplateLiteral: 20,\n\tSuper: 20,\n\tSequenceExpression: 20,\n\t// Operations\n\tMemberExpression: 19,\n\tCallExpression: 19,\n\tNewExpression: 19,\n\t// Other definitions\n\tArrowFunctionExpression: NEEDS_PARENTHESES,\n\tClassExpression: NEEDS_PARENTHESES,\n\tFunctionExpression: NEEDS_PARENTHESES,\n\tObjectExpression: NEEDS_PARENTHESES,\n\t// Other operations\n\tUpdateExpression: 16,\n\tUnaryExpression: 15,\n\tBinaryExpression: 14,\n\tLogicalExpression: 13,\n\tConditionalExpression: 4,\n\tAssignmentExpression: 3,\n\tAwaitExpression: 2,\n\tYieldExpression: 2,\n\tRestElement: 1,\n}\n\nfunction formatSequence(state, nodes) {\n\t/*\n\tWrites into `state` a sequence of `nodes`.\n\t*/\n\tconst { generator } = state\n\tstate.write('(')\n\tif (nodes != null && nodes.length > 0) {\n\t\tgenerator[nodes[0].type](nodes[0], state)\n\t\tconst { length } = nodes\n\t\tfor (let i = 1; i < length; i++) {\n\t\t\tconst param = nodes[i]\n\t\t\tstate.write(', ')\n\t\t\tgenerator[param.type](param, state)\n\t\t}\n\t}\n\tstate.write(')')\n}\n\nfunction expressionNeedsParenthesis(node, parentNode, isRightHand) {\n\tconst nodePrecedence = EXPRESSIONS_PRECEDENCE[node.type]\n\tif (nodePrecedence === NEEDS_PARENTHESES) {\n\t\treturn true\n\t}\n\tconst parentNodePrecedence = EXPRESSIONS_PRECEDENCE[parentNode.type]\n\tif (nodePrecedence !== parentNodePrecedence) {\n\t\t// Different node types\n\t\treturn nodePrecedence < parentNodePrecedence\n\t}\n\tif (nodePrecedence !== 13 && nodePrecedence !== 14) {\n\t\t// Not a `LogicalExpression` or `BinaryExpression`\n\t\treturn false\n\t}\n\tif (node.operator === '**' && parentNode.operator === '**') {\n\t\t// Exponentiation operator has right-to-left associativity\n\t\treturn !isRightHand\n\t}\n\tif (isRightHand) {\n\t\t// Parenthesis are used if both operators have the same precedence\n\t\treturn (\n\t\t\tOPERATOR_PRECEDENCE[node.operator] <=\n\t\t\tOPERATOR_PRECEDENCE[parentNode.operator]\n\t\t)\n\t}\n\treturn (\n\t\tOPERATOR_PRECEDENCE[node.operator] <\n\t\tOPERATOR_PRECEDENCE[parentNode.operator]\n\t)\n}\n\nfunction formatBinaryExpressionPart(state, node, parentNode, isRightHand) {\n\t/*\n\tWrites into `state` a left-hand or right-hand expression `node`\n\tfrom a binary expression applying the provided `operator`.\n\tThe `isRightHand` parameter should be `true` if the `node` is a right-hand argument.\n\t*/\n\tconst { generator } = state\n\tif (expressionNeedsParenthesis(node, parentNode, isRightHand)) {\n\t\tstate.write('(')\n\t\tgenerator[node.type](node, state)\n\t\tstate.write(')')\n\t} else {\n\t\tgenerator[node.type](node, state)\n\t}\n}\n\nfunction reindent(state, text, indent, lineEnd) {\n\t/*\n\tWrites into `state` the `text` string reindented with the provided `indent`.\n\t*/\n\tconst lines = text.split('\\n')\n\tconst end = lines.length - 1\n\tstate.write(lines[0].trim())\n\tif (end > 0) {\n\t\tstate.write(lineEnd)\n\t\tfor (let i = 1; i < end; i++) {\n\t\t\tstate.write(indent + lines[i].trim() + lineEnd)\n\t\t}\n\t\tstate.write(indent + lines[end].trim())\n\t}\n}\n\nfunction formatComments(state, comments, indent, lineEnd) {\n\t/*\n\tWrites into `state` the provided list of `comments`, with the given `indent` and `lineEnd` strings.\n\tLine comments will end with `\"\\n\"` regardless of the value of `lineEnd`.\n\tExpects to start on a new unindented line.\n\t*/\n\tconst { length } = comments\n\tfor (let i = 0; i < length; i++) {\n\t\tconst comment = comments[i]\n\t\tstate.write(indent)\n\t\tif (comment.type[0] === 'L') {\n\t\t\t// Line comment\n\t\t\tstate.write('// ' + comment.value.trim() + '\\n')\n\t\t} else {\n\t\t\t// Block comment\n\t\t\tstate.write('/*')\n\t\t\treindent(state, comment.value, indent, lineEnd)\n\t\t\tstate.write('*/' + lineEnd)\n\t\t}\n\t}\n}\n\nfunction hasCallExpression(node) {\n\t/*\n\tReturns `true` if the provided `node` contains a call expression and `false` otherwise.\n\t*/\n\tlet currentNode = node\n\twhile (currentNode != null) {\n\t\tconst { type } = currentNode\n\t\tif (type[0] === 'C' && type[1] === 'a') {\n\t\t\t// Is CallExpression\n\t\t\treturn true\n\t\t} else if (type[0] === 'M' && type[1] === 'e' && type[2] === 'm') {\n\t\t\t// Is MemberExpression\n\t\t\tcurrentNode = currentNode.object\n\t\t} else {\n\t\t\treturn false\n\t\t}\n\t}\n}\n\nfunction formatVariableDeclaration(state, node) {\n\t/*\n\tWrites into `state` a variable declaration.\n\t*/\n\tconst { generator } = state\n\tconst { declarations } = node\n\tstate.write(node.kind + ' ')\n\tconst { length } = declarations\n\tif (length > 0) {\n\t\tgenerator.VariableDeclarator(declarations[0], state)\n\t\tfor (let i = 1; i < length; i++) {\n\t\t\tstate.write(', ')\n\t\t\tgenerator.VariableDeclarator(declarations[i], state)\n\t\t}\n\t}\n}\n\nlet ForInStatement,\n\tFunctionDeclaration,\n\tRestElement,\n\tBinaryExpression,\n\tArrayExpression,\n\tBlockStatement\n\nexport const baseGenerator = {\n\tProgram(node, state) {\n\t\tconst indent = state.indent.repeat(state.indentLevel)\n\t\tconst { lineEnd, writeComments } = state\n\t\tif (writeComments && node.comments != null) {\n\t\t\tformatComments(state, node.comments, indent, lineEnd)\n\t\t}\n\t\tconst statements = node.body\n\t\tconst { length } = statements\n\t\tfor (let i = 0; i < length; i++) {\n\t\t\tconst statement = statements[i]\n\t\t\tif (writeComments && statement.comments != null) {\n\t\t\t\tformatComments(state, statement.comments, indent, lineEnd)\n\t\t\t}\n\t\t\tstate.write(indent)\n\t\t\tthis[statement.type](statement, state)\n\t\t\tstate.write(lineEnd)\n\t\t}\n\t\tif (writeComments && node.trailingComments != null) {\n\t\t\tformatComments(state, node.trailingComments, indent, lineEnd)\n\t\t}\n\t},\n\tBlockStatement: (BlockStatement = function(node, state) {\n\t\tconst indent = state.indent.repeat(state.indentLevel++)\n\t\tconst { lineEnd, writeComments } = state\n\t\tconst statementIndent = indent + state.indent\n\t\tstate.write('{')\n\t\tconst statements = node.body\n\t\tif (statements != null && statements.length > 0) {\n\t\t\tstate.write(lineEnd)\n\t\t\tif (writeComments && node.comments != null) {\n\t\t\t\tformatComments(state, node.comments, statementIndent, lineEnd)\n\t\t\t}\n\t\t\tconst { length } = statements\n\t\t\tfor (let i = 0; i < length; i++) {\n\t\t\t\tconst statement = statements[i]\n\t\t\t\tif (writeComments && statement.comments != null) {\n\t\t\t\t\tformatComments(state, statement.comments, statementIndent, lineEnd)\n\t\t\t\t}\n\t\t\t\tstate.write(statementIndent)\n\t\t\t\tthis[statement.type](statement, state)\n\t\t\t\tstate.write(lineEnd)\n\t\t\t}\n\t\t\tstate.write(indent)\n\t\t} else {\n\t\t\tif (writeComments && node.comments != null) {\n\t\t\t\tstate.write(lineEnd)\n\t\t\t\tformatComments(state, node.comments, statementIndent, lineEnd)\n\t\t\t\tstate.write(indent)\n\t\t\t}\n\t\t}\n\t\tif (writeComments && node.trailingComments != null) {\n\t\t\tformatComments(state, node.trailingComments, statementIndent, lineEnd)\n\t\t}\n\t\tstate.write('}')\n\t\tstate.indentLevel--\n\t}),\n\tClassBody: BlockStatement,\n\tEmptyStatement(node, state) {\n\t\tstate.write(';')\n\t},\n\tExpressionStatement(node, state) {\n\t\tconst precedence = EXPRESSIONS_PRECEDENCE[node.expression.type]\n\t\tif (\n\t\t\tprecedence === NEEDS_PARENTHESES ||\n\t\t\t(precedence === 3 && node.expression.left.type[0] === 'O')\n\t\t) {\n\t\t\t// Should always have parentheses or is an AssignmentExpression to an ObjectPattern\n\t\t\tstate.write('(')\n\t\t\tthis[node.expression.type](node.expression, state)\n\t\t\tstate.write(')')\n\t\t} else {\n\t\t\tthis[node.expression.type](node.expression, state)\n\t\t}\n\t\tstate.write(';')\n\t},\n\tIfStatement(node, state) {\n\t\tstate.write('if (')\n\t\tthis[node.test.type](node.test, state)\n\t\tstate.write(') ')\n\t\tthis[node.consequent.type](node.consequent, state)\n\t\tif (node.alternate != null) {\n\t\t\tstate.write(' else ')\n\t\t\tthis[node.alternate.type](node.alternate, state)\n\t\t}\n\t},\n\tLabeledStatement(node, state) {\n\t\tthis[node.label.type](node.label, state)\n\t\tstate.write(': ')\n\t\tthis[node.body.type](node.body, state)\n\t},\n\tBreakStatement(node, state) {\n\t\tstate.write('break')\n\t\tif (node.label != null) {\n\t\t\tstate.write(' ')\n\t\t\tthis[node.label.type](node.label, state)\n\t\t}\n\t\tstate.write(';')\n\t},\n\tContinueStatement(node, state) {\n\t\tstate.write('continue')\n\t\tif (node.label != null) {\n\t\t\tstate.write(' ')\n\t\t\tthis[node.label.type](node.label, state)\n\t\t}\n\t\tstate.write(';')\n\t},\n\tWithStatement(node, state) {\n\t\tstate.write('with (')\n\t\tthis[node.object.type](node.object, state)\n\t\tstate.write(') ')\n\t\tthis[node.body.type](node.body, state)\n\t},\n\tSwitchStatement(node, state) {\n\t\tconst indent = state.indent.repeat(state.indentLevel++)\n\t\tconst { lineEnd, writeComments } = state\n\t\tstate.indentLevel++\n\t\tconst caseIndent = indent + state.indent\n\t\tconst statementIndent = caseIndent + state.indent\n\t\tstate.write('switch (')\n\t\tthis[node.discriminant.type](node.discriminant, state)\n\t\tstate.write(') {' + lineEnd)\n\t\tconst { cases: occurences } = node\n\t\tconst { length: occurencesCount } = occurences\n\t\tfor (let i = 0; i < occurencesCount; i++) {\n\t\t\tconst occurence = occurences[i]\n\t\t\tif (writeComments && occurence.comments != null) {\n\t\t\t\tformatComments(state, occurence.comments, caseIndent, lineEnd)\n\t\t\t}\n\t\t\tif (occurence.test) {\n\t\t\t\tstate.write(caseIndent + 'case ')\n\t\t\t\tthis[occurence.test.type](occurence.test, state)\n\t\t\t\tstate.write(':' + lineEnd)\n\t\t\t} else {\n\t\t\t\tstate.write(caseIndent + 'default:' + lineEnd)\n\t\t\t}\n\t\t\tconst { consequent } = occurence\n\t\t\tconst { length: consequentCount } = consequent\n\t\t\tfor (let i = 0; i < consequentCount; i++) {\n\t\t\t\tconst statement = consequent[i]\n\t\t\t\tif (writeComments && statement.comments != null) {\n\t\t\t\t\tformatComments(state, statement.comments, statementIndent, lineEnd)\n\t\t\t\t}\n\t\t\t\tstate.write(statementIndent)\n\t\t\t\tthis[statement.type](statement, state)\n\t\t\t\tstate.write(lineEnd)\n\t\t\t}\n\t\t}\n\t\tstate.indentLevel -= 2\n\t\tstate.write(indent + '}')\n\t},\n\tReturnStatement(node, state) {\n\t\tstate.write('return')\n\t\tif (node.argument) {\n\t\t\tstate.write(' ')\n\t\t\tthis[node.argument.type](node.argument, state)\n\t\t}\n\t\tstate.write(';')\n\t},\n\tThrowStatement(node, state) {\n\t\tstate.write('throw ')\n\t\tthis[node.argument.type](node.argument, state)\n\t\tstate.write(';')\n\t},\n\tTryStatement(node, state) {\n\t\tstate.write('try ')\n\t\tthis[node.block.type](node.block, state)\n\t\tif (node.handler) {\n\t\t\tconst { handler } = node\n\t\t\tstate.write(' catch (')\n\t\t\tthis[handler.param.type](handler.param, state)\n\t\t\tstate.write(') ')\n\t\t\tthis[handler.body.type](handler.body, state)\n\t\t}\n\t\tif (node.finalizer) {\n\t\t\tstate.write(' finally ')\n\t\t\tthis[node.finalizer.type](node.finalizer, state)\n\t\t}\n\t},\n\tWhileStatement(node, state) {\n\t\tstate.write('while (')\n\t\tthis[node.test.type](node.test, state)\n\t\tstate.write(') ')\n\t\tthis[node.body.type](node.body, state)\n\t},\n\tDoWhileStatement(node, state) {\n\t\tstate.write('do ')\n\t\tthis[node.body.type](node.body, state)\n\t\tstate.write(' while (')\n\t\tthis[node.test.type](node.test, state)\n\t\tstate.write(');')\n\t},\n\tForStatement(node, state) {\n\t\tstate.write('for (')\n\t\tif (node.init != null) {\n\t\t\tconst { init } = node\n\t\t\tif (init.type[0] === 'V') {\n\t\t\t\tformatVariableDeclaration(state, init)\n\t\t\t} else {\n\t\t\t\tthis[init.type](init, state)\n\t\t\t}\n\t\t}\n\t\tstate.write('; ')\n\t\tif (node.test) {\n\t\t\tthis[node.test.type](node.test, state)\n\t\t}\n\t\tstate.write('; ')\n\t\tif (node.update) {\n\t\t\tthis[node.update.type](node.update, state)\n\t\t}\n\t\tstate.write(') ')\n\t\tthis[node.body.type](node.body, state)\n\t},\n\tForInStatement: (ForInStatement = function(node, state) {\n\t\tstate.write('for (')\n\t\tconst { left } = node\n\t\tif (left.type[0] === 'V') {\n\t\t\tformatVariableDeclaration(state, left)\n\t\t} else {\n\t\t\tthis[left.type](left, state)\n\t\t}\n\t\t// Identifying whether node.type is `ForInStatement` or `ForOfStatement`\n\t\tstate.write(node.type[3] === 'I' ? ' in ' : ' of ')\n\t\tthis[node.right.type](node.right, state)\n\t\tstate.write(') ')\n\t\tthis[node.body.type](node.body, state)\n\t}),\n\tForOfStatement: ForInStatement,\n\tDebuggerStatement(node, state) {\n\t\tstate.write('debugger;' + state.lineEnd)\n\t},\n\tFunctionDeclaration: (FunctionDeclaration = function(node, state) {\n\t\tstate.write(\n\t\t\t(node.async ? 'async ' : '') +\n\t\t\t\t(node.generator ? 'function* ' : 'function ') +\n\t\t\t\t(node.id ? node.id.name : ''),\n\t\t\tnode\n\t\t)\n\t\tformatSequence(state, node.params)\n\t\tstate.write(' ')\n\t\tthis[node.body.type](node.body, state)\n\t}),\n\tFunctionExpression: FunctionDeclaration,\n\tVariableDeclaration(node, state) {\n\t\tformatVariableDeclaration(state, node)\n\t\tstate.write(';')\n\t},\n\tVariableDeclarator(node, state) {\n\t\tthis[node.id.type](node.id, state)\n\t\tif (node.init != null) {\n\t\t\tstate.write(' = ')\n\t\t\tthis[node.init.type](node.init, state)\n\t\t}\n\t},\n\tClassDeclaration(node, state) {\n\t\tstate.write('class ' + (node.id ? `${node.id.name} ` : ''), node)\n\t\tif (node.superClass) {\n\t\t\tstate.write('extends ')\n\t\t\tthis[node.superClass.type](node.superClass, state)\n\t\t\tstate.write(' ')\n\t\t}\n\t\tthis.ClassBody(node.body, state)\n\t},\n\tImportDeclaration(node, state) {\n\t\tstate.write('import ')\n\t\tconst { specifiers } = node\n\t\tconst { length } = specifiers\n\t\t// NOTE: Once babili is fixed, put this after condition\n\t\t// https://github.com/babel/babili/issues/430\n\t\tlet i = 0\n\t\tif (length > 0) {\n\t\t\tfor (; i < length; ) {\n\t\t\t\tif (i > 0) {\n\t\t\t\t\tstate.write(', ')\n\t\t\t\t}\n\t\t\t\tconst specifier = specifiers[i]\n\t\t\t\tconst type = specifier.type[6]\n\t\t\t\tif (type === 'D') {\n\t\t\t\t\t// ImportDefaultSpecifier\n\t\t\t\t\tstate.write(specifier.local.name, specifier)\n\t\t\t\t\ti++\n\t\t\t\t} else if (type === 'N') {\n\t\t\t\t\t// ImportNamespaceSpecifier\n\t\t\t\t\tstate.write('* as ' + specifier.local.name, specifier)\n\t\t\t\t\ti++\n\t\t\t\t} else {\n\t\t\t\t\t// ImportSpecifier\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (i < length) {\n\t\t\t\tstate.write('{')\n\t\t\t\tfor (;;) {\n\t\t\t\t\tconst specifier = specifiers[i]\n\t\t\t\t\tconst { name } = specifier.imported\n\t\t\t\t\tstate.write(name, specifier)\n\t\t\t\t\tif (name !== specifier.local.name) {\n\t\t\t\t\t\tstate.write(' as ' + specifier.local.name)\n\t\t\t\t\t}\n\t\t\t\t\tif (++i < length) {\n\t\t\t\t\t\tstate.write(', ')\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbreak\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tstate.write('}')\n\t\t\t}\n\t\t\tstate.write(' from ')\n\t\t}\n\t\tthis.Literal(node.source, state)\n\t\tstate.write(';')\n\t},\n\tExportDefaultDeclaration(node, state) {\n\t\tstate.write('export default ')\n\t\tthis[node.declaration.type](node.declaration, state)\n\t\tif (\n\t\t\tEXPRESSIONS_PRECEDENCE[node.declaration.type] &&\n\t\t\tnode.declaration.type[0] !== 'F'\n\t\t) {\n\t\t\t// All expression nodes except `FunctionExpression`\n\t\t\tstate.write(';')\n\t\t}\n\t},\n\tExportNamedDeclaration(node, state) {\n\t\tstate.write('export ')\n\t\tif (node.declaration) {\n\t\t\tthis[node.declaration.type](node.declaration, state)\n\t\t} else {\n\t\t\tstate.write('{')\n\t\t\tconst { specifiers } = node,\n\t\t\t\t{ length } = specifiers\n\t\t\tif (length > 0) {\n\t\t\t\tfor (let i = 0; ; ) {\n\t\t\t\t\tconst specifier = specifiers[i]\n\t\t\t\t\tconst { name } = specifier.local\n\t\t\t\t\tstate.write(name, specifier)\n\t\t\t\t\tif (name !== specifier.exported.name) {\n\t\t\t\t\t\tstate.write(' as ' + specifier.exported.name)\n\t\t\t\t\t}\n\t\t\t\t\tif (++i < length) {\n\t\t\t\t\t\tstate.write(', ')\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbreak\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tstate.write('}')\n\t\t\tif (node.source) {\n\t\t\t\tstate.write(' from ')\n\t\t\t\tthis.Literal(node.source, state)\n\t\t\t}\n\t\t\tstate.write(';')\n\t\t}\n\t},\n\tExportAllDeclaration(node, state) {\n\t\tstate.write('export * from ')\n\t\tthis.Literal(node.source, state)\n\t\tstate.write(';')\n\t},\n\tMethodDefinition(node, state) {\n\t\tif (node.static) {\n\t\t\tstate.write('static ')\n\t\t}\n\t\tconst kind = node.kind[0]\n\t\tif (kind === 'g' || kind === 's') {\n\t\t\t// Getter or setter\n\t\t\tstate.write(node.kind + ' ')\n\t\t}\n\t\tif (node.value.async) {\n\t\t\tstate.write('async ')\n\t\t}\n\t\tif (node.value.generator) {\n\t\t\tstate.write('*')\n\t\t}\n\t\tif (node.computed) {\n\t\t\tstate.write('[')\n\t\t\tthis[node.key.type](node.key, state)\n\t\t\tstate.write(']')\n\t\t} else {\n\t\t\tthis[node.key.type](node.key, state)\n\t\t}\n\t\tformatSequence(state, node.value.params)\n\t\tstate.write(' ')\n\t\tthis[node.value.body.type](node.value.body, state)\n\t},\n\tClassExpression(node, state) {\n\t\tthis.ClassDeclaration(node, state)\n\t},\n\tArrowFunctionExpression(node, state) {\n\t\tstate.write(node.async ? 'async ' : '', node)\n\t\tconst { params } = node\n\t\tif (params != null) {\n\t\t\t// Omit parenthesis if only one named parameter\n\t\t\tif (params.length === 1 && params[0].type[0] === 'I') {\n\t\t\t\t// If params[0].type[0] starts with 'I', it can't be `ImportDeclaration` nor `IfStatement` and thus is `Identifier`\n\t\t\t\tstate.write(params[0].name, params[0])\n\t\t\t} else {\n\t\t\t\tformatSequence(state, node.params)\n\t\t\t}\n\t\t}\n\t\tstate.write(' => ')\n\t\tif (node.body.type[0] === 'O') {\n\t\t\t// Body is an object expression\n\t\t\tstate.write('(')\n\t\t\tthis.ObjectExpression(node.body, state)\n\t\t\tstate.write(')')\n\t\t} else {\n\t\t\tthis[node.body.type](node.body, state)\n\t\t}\n\t},\n\tThisExpression(node, state) {\n\t\tstate.write('this', node)\n\t},\n\tSuper(node, state) {\n\t\tstate.write('super', node)\n\t},\n\tRestElement: (RestElement = function(node, state) {\n\t\tstate.write('...')\n\t\tthis[node.argument.type](node.argument, state)\n\t}),\n\tSpreadElement: RestElement,\n\tYieldExpression(node, state) {\n\t\tstate.write(node.delegate ? 'yield*' : 'yield')\n\t\tif (node.argument) {\n\t\t\tstate.write(' ')\n\t\t\tthis[node.argument.type](node.argument, state)\n\t\t}\n\t},\n\tAwaitExpression(node, state) {\n\t\tstate.write('await ')\n\t\tif (node.argument) {\n\t\t\tthis[node.argument.type](node.argument, state)\n\t\t}\n\t},\n\tTemplateLiteral(node, state) {\n\t\tconst { quasis, expressions } = node\n\t\tstate.write('`')\n\t\tconst { length } = expressions\n\t\tfor (let i = 0; i < length; i++) {\n\t\t\tconst expression = expressions[i]\n\t\t\tstate.write(quasis[i].value.raw)\n\t\t\tstate.write('${')\n\t\t\tthis[expression.type](expression, state)\n\t\t\tstate.write('}')\n\t\t}\n\t\tstate.write(quasis[quasis.length - 1].value.raw)\n\t\tstate.write('`')\n\t},\n\tTaggedTemplateExpression(node, state) {\n\t\tthis[node.tag.type](node.tag, state)\n\t\tthis[node.quasi.type](node.quasi, state)\n\t},\n\tArrayExpression: (ArrayExpression = function(node, state) {\n\t\tstate.write('[')\n\t\tif (node.elements.length > 0) {\n\t\t\tconst { elements } = node,\n\t\t\t\t{ length } = elements\n\t\t\tfor (let i = 0; ; ) {\n\t\t\t\tconst element = elements[i]\n\t\t\t\tif (element != null) {\n\t\t\t\t\tthis[element.type](element, state)\n\t\t\t\t}\n\t\t\t\tif (++i < length) {\n\t\t\t\t\tstate.write(', ')\n\t\t\t\t} else {\n\t\t\t\t\tif (element == null) {\n\t\t\t\t\t\tstate.write(', ')\n\t\t\t\t\t}\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tstate.write(']')\n\t}),\n\tArrayPattern: ArrayExpression,\n\tObjectExpression(node, state) {\n\t\tconst indent = state.indent.repeat(state.indentLevel++)\n\t\tconst { lineEnd, writeComments } = state\n\t\tconst propertyIndent = indent + state.indent\n\t\tstate.write('{')\n\t\tif (node.properties.length > 0) {\n\t\t\tstate.write(lineEnd)\n\t\t\tif (writeComments && node.comments != null) {\n\t\t\t\tformatComments(state, node.comments, propertyIndent, lineEnd)\n\t\t\t}\n\t\t\tconst comma = ',' + lineEnd\n\t\t\tconst { properties } = node,\n\t\t\t\t{ length } = properties\n\t\t\tfor (let i = 0; ; ) {\n\t\t\t\tconst property = properties[i]\n\t\t\t\tif (writeComments && property.comments != null) {\n\t\t\t\t\tformatComments(state, property.comments, propertyIndent, lineEnd)\n\t\t\t\t}\n\t\t\t\tstate.write(propertyIndent)\n\t\t\t\tthis.Property(property, state)\n\t\t\t\tif (++i < length) {\n\t\t\t\t\tstate.write(comma)\n\t\t\t\t} else {\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\t\t\tstate.write(lineEnd)\n\t\t\tif (writeComments && node.trailingComments != null) {\n\t\t\t\tformatComments(state, node.trailingComments, propertyIndent, lineEnd)\n\t\t\t}\n\t\t\tstate.write(indent + '}')\n\t\t} else if (writeComments) {\n\t\t\tif (node.comments != null) {\n\t\t\t\tstate.write(lineEnd)\n\t\t\t\tformatComments(state, node.comments, propertyIndent, lineEnd)\n\t\t\t\tif (node.trailingComments != null) {\n\t\t\t\t\tformatComments(state, node.trailingComments, propertyIndent, lineEnd)\n\t\t\t\t}\n\t\t\t\tstate.write(indent + '}')\n\t\t\t} else if (node.trailingComments != null) {\n\t\t\t\tstate.write(lineEnd)\n\t\t\t\tformatComments(state, node.trailingComments, propertyIndent, lineEnd)\n\t\t\t\tstate.write(indent + '}')\n\t\t\t} else {\n\t\t\t\tstate.write('}')\n\t\t\t}\n\t\t} else {\n\t\t\tstate.write('}')\n\t\t}\n\t\tstate.indentLevel--\n\t},\n\tProperty(node, state) {\n\t\tif (node.method || node.kind[0] !== 'i') {\n\t\t\t// Either a method or of kind `set` or `get` (not `init`)\n\t\t\tthis.MethodDefinition(node, state)\n\t\t} else {\n\t\t\tif (!node.shorthand) {\n\t\t\t\tif (node.computed) {\n\t\t\t\t\tstate.write('[')\n\t\t\t\t\tthis[node.key.type](node.key, state)\n\t\t\t\t\tstate.write(']')\n\t\t\t\t} else {\n\t\t\t\t\tthis[node.key.type](node.key, state)\n\t\t\t\t}\n\t\t\t\tstate.write(': ')\n\t\t\t}\n\t\t\tthis[node.value.type](node.value, state)\n\t\t}\n\t},\n\tObjectPattern(node, state) {\n\t\tstate.write('{')\n\t\tif (node.properties.length > 0) {\n\t\t\tconst { properties } = node,\n\t\t\t\t{ length } = properties\n\t\t\tfor (let i = 0; ; ) {\n\t\t\t\tthis[properties[i].type](properties[i], state)\n\t\t\t\tif (++i < length) {\n\t\t\t\t\tstate.write(', ')\n\t\t\t\t} else {\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tstate.write('}')\n\t},\n\tSequenceExpression(node, state) {\n\t\tformatSequence(state, node.expressions)\n\t},\n\tUnaryExpression(node, state) {\n\t\tif (node.prefix) {\n\t\t\tstate.write(node.operator)\n\t\t\tif (node.operator.length > 1) {\n\t\t\t\tstate.write(' ')\n\t\t\t}\n\t\t\tif (\n\t\t\t\tEXPRESSIONS_PRECEDENCE[node.argument.type] <\n\t\t\t\tEXPRESSIONS_PRECEDENCE.UnaryExpression\n\t\t\t) {\n\t\t\t\tstate.write('(')\n\t\t\t\tthis[node.argument.type](node.argument, state)\n\t\t\t\tstate.write(')')\n\t\t\t} else {\n\t\t\t\tthis[node.argument.type](node.argument, state)\n\t\t\t}\n\t\t} else {\n\t\t\t// FIXME: This case never occurs\n\t\t\tthis[node.argument.type](node.argument, state)\n\t\t\tstate.write(node.operator)\n\t\t}\n\t},\n\tUpdateExpression(node, state) {\n\t\t// Always applied to identifiers or members, no parenthesis check needed\n\t\tif (node.prefix) {\n\t\t\tstate.write(node.operator)\n\t\t\tthis[node.argument.type](node.argument, state)\n\t\t} else {\n\t\t\tthis[node.argument.type](node.argument, state)\n\t\t\tstate.write(node.operator)\n\t\t}\n\t},\n\tAssignmentExpression(node, state) {\n\t\tthis[node.left.type](node.left, state)\n\t\tstate.write(' ' + node.operator + ' ')\n\t\tthis[node.right.type](node.right, state)\n\t},\n\tAssignmentPattern(node, state) {\n\t\tthis[node.left.type](node.left, state)\n\t\tstate.write(' = ')\n\t\tthis[node.right.type](node.right, state)\n\t},\n\tBinaryExpression: (BinaryExpression = function(node, state) {\n\t\tif (node.operator === 'in') {\n\t\t\t// Avoids confusion in `for` loops initializers\n\t\t\tstate.write('(')\n\t\t\tformatBinaryExpressionPart(state, node.left, node, false)\n\t\t\tstate.write(' ' + node.operator + ' ')\n\t\t\tformatBinaryExpressionPart(state, node.right, node, true)\n\t\t\tstate.write(')')\n\t\t} else {\n\t\t\tformatBinaryExpressionPart(state, node.left, node, false)\n\t\t\tstate.write(' ' + node.operator + ' ')\n\t\t\tformatBinaryExpressionPart(state, node.right, node, true)\n\t\t}\n\t}),\n\tLogicalExpression: BinaryExpression,\n\tConditionalExpression(node, state) {\n\t\tif (\n\t\t\tEXPRESSIONS_PRECEDENCE[node.test.type] >\n\t\t\tEXPRESSIONS_PRECEDENCE.ConditionalExpression\n\t\t) {\n\t\t\tthis[node.test.type](node.test, state)\n\t\t} else {\n\t\t\tstate.write('(')\n\t\t\tthis[node.test.type](node.test, state)\n\t\t\tstate.write(')')\n\t\t}\n\t\tstate.write(' ? ')\n\t\tthis[node.consequent.type](node.consequent, state)\n\t\tstate.write(' : ')\n\t\tthis[node.alternate.type](node.alternate, state)\n\t},\n\tNewExpression(node, state) {\n\t\tstate.write('new ')\n\t\tif (\n\t\t\tEXPRESSIONS_PRECEDENCE[node.callee.type] <\n\t\t\t\tEXPRESSIONS_PRECEDENCE.CallExpression ||\n\t\t\thasCallExpression(node.callee)\n\t\t) {\n\t\t\tstate.write('(')\n\t\t\tthis[node.callee.type](node.callee, state)\n\t\t\tstate.write(')')\n\t\t} else {\n\t\t\tthis[node.callee.type](node.callee, state)\n\t\t}\n\t\tformatSequence(state, node['arguments'])\n\t},\n\tCallExpression(node, state) {\n\t\tif (\n\t\t\tEXPRESSIONS_PRECEDENCE[node.callee.type] <\n\t\t\tEXPRESSIONS_PRECEDENCE.CallExpression\n\t\t) {\n\t\t\tstate.write('(')\n\t\t\tthis[node.callee.type](node.callee, state)\n\t\t\tstate.write(')')\n\t\t} else {\n\t\t\tthis[node.callee.type](node.callee, state)\n\t\t}\n\t\tformatSequence(state, node['arguments'])\n\t},\n\tMemberExpression(node, state) {\n\t\tif (\n\t\t\tEXPRESSIONS_PRECEDENCE[node.object.type] <\n\t\t\tEXPRESSIONS_PRECEDENCE.MemberExpression\n\t\t) {\n\t\t\tstate.write('(')\n\t\t\tthis[node.object.type](node.object, state)\n\t\t\tstate.write(')')\n\t\t} else {\n\t\t\tthis[node.object.type](node.object, state)\n\t\t}\n\t\tif (node.computed) {\n\t\t\tstate.write('[')\n\t\t\tthis[node.property.type](node.property, state)\n\t\t\tstate.write(']')\n\t\t} else {\n\t\t\tstate.write('.')\n\t\t\tthis[node.property.type](node.property, state)\n\t\t}\n\t},\n\tMetaProperty(node, state) {\n\t\tstate.write(node.meta.name + '.' + node.property.name, node)\n\t},\n\tIdentifier(node, state) {\n\t\tstate.write(node.name, node)\n\t},\n\tLiteral(node, state) {\n\t\tif (node.raw != null) {\n\t\t\tstate.write(node.raw, node)\n\t\t} else if (node.regex != null) {\n\t\t\tthis.RegExpLiteral(node, state)\n\t\t} else {\n\t\t\tstate.write(stringify(node.value), node)\n\t\t}\n\t},\n\tRegExpLiteral(node, state) {\n\t\tconst { regex } = node\n\t\tstate.write(`/${regex.pattern}/${regex.flags}`, node)\n\t},\n}\n\nconst EMPTY_OBJECT = {}\n\nclass State {\n\tconstructor(options) {\n\t\tconst setup = options == null ? EMPTY_OBJECT : options\n\t\tthis.output = ''\n\t\t// Functional options\n\t\tif (setup.output != null) {\n\t\t\tthis.output = setup.output\n\t\t\tthis.write = this.writeToStream\n\t\t} else {\n\t\t\tthis.output = ''\n\t\t}\n\t\tthis.generator = setup.generator != null ? setup.generator : baseGenerator\n\t\t// Formating setup\n\t\tthis.indent = setup.indent != null ? setup.indent : '  '\n\t\tthis.lineEnd = setup.lineEnd != null ? setup.lineEnd : '\\n'\n\t\tthis.indentLevel =\n\t\t\tsetup.startingIndentLevel != null ? setup.startingIndentLevel : 0\n\t\tthis.writeComments = setup.comments ? setup.comments : false\n\t\t// Source map\n\t\tif (setup.sourceMap != null) {\n\t\t\tthis.write =\n\t\t\t\tsetup.output == null ? this.writeAndMap : this.writeToStreamAndMap\n\t\t\tthis.sourceMap = setup.sourceMap\n\t\t\tthis.line = 1\n\t\t\tthis.column = 0\n\t\t\tthis.lineEndSize = this.lineEnd.split('\\n').length - 1\n\t\t\tthis.mapping = {\n\t\t\t\toriginal: null,\n\t\t\t\tgenerated: this,\n\t\t\t\tname: undefined,\n\t\t\t\tsource: setup.sourceMap.file || setup.sourceMap._file,\n\t\t\t}\n\t\t}\n\t}\n\n\twrite(code) {\n\t\tthis.output += code\n\t}\n\n\twriteToStream(code) {\n\t\tthis.output.write(code)\n\t}\n\n\twriteAndMap(code, node) {\n\t\tthis.output += code\n\t\tthis.map(code, node)\n\t}\n\n\twriteToStreamAndMap(code, node) {\n\t\tthis.output.write(code)\n\t\tthis.map(code, node)\n\t}\n\n\tmap(code, node) {\n\t\tif (node != null && node.loc != null) {\n\t\t\tconst { mapping } = this\n\t\t\tmapping.original = node.loc.start\n\t\t\tmapping.name = node.name\n\t\t\tthis.sourceMap.addMapping(mapping)\n\t\t}\n\t\tif (code.length > 0) {\n\t\t\tif (this.lineEndSize > 0) {\n\t\t\t\tif (code.endsWith(this.lineEnd)) {\n\t\t\t\t\tthis.line += this.lineEndSize\n\t\t\t\t\tthis.column = 0\n\t\t\t\t} else if (code[code.length - 1] === '\\n') {\n\t\t\t\t\t// Case of inline comment\n\t\t\t\t\tthis.line++\n\t\t\t\t\tthis.column = 0\n\t\t\t\t} else {\n\t\t\t\t\tthis.column += code.length\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (code[code.length - 1] === '\\n') {\n\t\t\t\t\t// Case of inline comment\n\t\t\t\t\tthis.line++\n\t\t\t\t\tthis.column = 0\n\t\t\t\t} else {\n\t\t\t\t\tthis.column += code.length\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\ttoString() {\n\t\treturn this.output\n\t}\n}\n\nexport function generate(node, options) {\n\t/*\n\tReturns a string representing the rendered code of the provided AST `node`.\n\tThe `options` are:\n\n\t- `indent`: string to use for indentation (defaults to `␣␣`)\n\t- `lineEnd`: string to use for line endings (defaults to `\\n`)\n\t- `startingIndentLevel`: indent level to start from (defaults to `0`)\n\t- `comments`: generate comments if `true` (defaults to `false`)\n\t- `output`: output stream to write the rendered code to (defaults to `null`)\n\t- `generator`: custom code generator (defaults to `baseGenerator`)\n\t*/\n\tconst state = new State(options)\n\t// Travel through the AST node and generate the code\n\tstate.generator[node.type](node, state)\n\treturn state.output\n}\n",
			"file": "tests/node_modules/astring/src/astring.js",
			"file_size": 30340,
			"file_write_time": 131525564650000000,
			"settings":
			{
				"buffer_size": 28029,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "Searching 7 files for \"require(action)\" (case sensitive)\n\nD:\\Web\\Mopus\\package\\src\\Mopus.js:\n   72  \t\t\t\t\taction = UrlModule\n   73  \t\t\t\telse if (typeof action == 'string')\n   74: \t\t\t\t\taction = require(action)\n   75  \n   76  \t\t\t\tlet exp = globToPattern(rule)\n\n1 match in 1 file\n\n\nSearching 7 files for \"const {exports}\"\n\nD:\\Web\\Mopus\\package\\src\\Module.js:\n  161  \t\t\targs += ',__dirname=\"'+this.dirName+'\",__filename=\"'+this.fileName+'\"'\n  162  \t\tlet content = this.toString(project)\n  163: \t\treturn 'function('+args+') {'+(content?'\\nconst {exports} = module\\n'+content:'')+'\\nreturn module.exports\\n}'\n  164  \t},\n  165  }\n\n1 match in 1 file\n",
			"settings":
			{
				"buffer_size": 641,
				"line_ending": "Windows",
				"name": "Find Results",
				"scratch": true
			}
		}
	],
	"build_system": "Packages/User/Mopus.sublime-build",
	"build_system_choices":
	[
		[
			[
				[
					"Packages/TypeScript/TypeScript.sublime-build",
					""
				],
				[
					"Packages/User/Typescript-ES2017.sublime-build",
					""
				]
			],
			[
				"Packages/TypeScript/TypeScript.sublime-build",
				""
			]
		],
		[
			[
				[
					"Packages/User/Mopus.sublime-build",
					""
				],
				[
					"Packages/User/Typescript-ES2017.sublime-build",
					""
				]
			],
			[
				"Packages/User/Mopus.sublime-build",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 203.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"package lis",
				"Package Control: List Packages"
			],
			[
				"js",
				"Set Syntax: JavaScript"
			],
			[
				"git",
				"Set Syntax: Git Config"
			],
			[
				"preference sett",
				"Preferences: Settings – Syntax Specific"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"Package Control: ins",
				"Package Control: Install Package"
			],
			[
				"Package Control: rem",
				"Package Control: Remove Package"
			],
			[
				"Package Control: remo",
				"Package Control: Remove Package"
			],
			[
				"Package Control: re\t",
				"Package Control: Remove Package"
			],
			[
				"Package Control: ena",
				"Package Control: Enable Package"
			],
			[
				"Package Control: dis",
				"Package Control: Disable Package"
			],
			[
				"Package Control: lis",
				"Package Control: List Packages"
			],
			[
				"Package Control: ",
				"Package Control: Enable Package"
			],
			[
				"Package Control: install",
				"Package Control: Install Package"
			],
			[
				"Package Control: instal",
				"Package Control: Install Package"
			],
			[
				"Package Control: ac",
				"Package Control: Enable Package"
			],
			[
				"Package Control: re",
				"Package Control: Remove Package"
			],
			[
				"Package Control: insta",
				"Package Control: Install Package"
			],
			[
				"Package Control: insl",
				"Package Control: Install Package"
			],
			[
				"Package Control: insll",
				"Package Control: Install Package"
			],
			[
				"Snippet: ",
				"Snippet: html"
			]
		],
		"width": 444.0
	},
	"console":
	{
		"height": 300.0,
		"history":
		[
			"Package Control: Install package ",
			"import urllib.request,os,hashlib; h = 'df21e130d211cfc94d9b0905775a7c0f' + '1e3d39e33b79698005270310898eea76'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/D/Web/Mopus",
		"/D/Web/Mopus/package",
		"/D/Web/Mopus/tests"
	],
	"file_history":
	[
		"/D/Web/Mopus/README.md",
		"/D/Web/Mopus/transform-class-properties/mopus.json",
		"/D/Web/Mopus/package/src/møpus.js",
		"/D/Web/Mopus/transform-class-properties/browser/transform-class-properties.js",
		"/D/Web/Mopus/tests/node_modules/minimatch/minimatch.js",
		"/D/Web/Mopus/transform-class-properties/package/index.js",
		"/D/Web/Mopus/package/src/Mopus.js",
		"/D/Web/Mopus/transform-class-properties",
		"/D/Web/Mopus/package/src/bin.js",
		"/D/Web/Mopus/package/modules/astring/generator.js",
		"/D/Web/Mopus/package/src/astHandler.js",
		"/D/Web/Mopus/package/src/Module.js",
		"/D/Web/Mopus/package/modules/astring/astring.js",
		"/D/Web/Mopus/package/src/Project.js",
		"/D/Web/Mopus/package/src/utils.js",
		"/D/Web/Mopus/tests/zabu.caca",
		"/D/Web/Mopus/tests/Hero.js",
		"/D/Web/Mopus/tests/mopusTest.js",
		"/D/Web/Mopus/tests/bundle.js",
		"/D/Web/Mopus/tests/folderTest.js",
		"/D/Web/Mopus/tests/dist/standard.js",
		"/D/Web/Sandbox/Svelte/my-new-project/src/MyComponent.html",
		"/D/Web/Sandbox/Svelte/my-new-project/src/App.html",
		"/D/Web/Sandbox/Svelte/my-new-project/src/main.js",
		"/D/Web/Sandbox/Svelte/my-new-project/public/bundle.js",
		"/D/Web/Mopus/package/README.md",
		"/D/Web/Mopus/tests/mopus.json",
		"/D/Web/Mopus/tests/cocu.js",
		"/D/Web/Mopus/tests/caca.js",
		"/D/Web/Mopus/3.0/package/src/utils/log.js",
		"/D/Web/Mopus/3.0/package/mopus.js",
		"/D/Web/Mopus/3.0/package/src/importFile.js",
		"/D/Web/Mopus/3.0/package/src/Module.js",
		"/D/Web/Mopus/package/package.json",
		"/D/Web/Mopus/package/mopus-bin.js",
		"/D/Web/Mopus/tests/node_modules/balanced-match/index.js",
		"/D/Web/Mopus/tests/node_modules/concat-map/index.js",
		"/D/Web/Mopus/tests/node_modules/brace-expansion/index.js",
		"/D/Web/Mopus/package/src/coloredErrors.js",
		"/D/Web/Mopus/tests/mopus.config.json",
		"/D/Web/Mopus/package/modules/acorn/acorn.js",
		"/D/Web/Mopus/tests/testFolderD/myRandomFile.js",
		"/D/Web/Mopus/package/modules/butternut/butternut.js",
		"/D/Web/Mopus/package/modules/acorn/acorn-loose.js",
		"/D/Web/Mopus/package/src/colors.js",
		"/D/Web/Mopus/tests/dist/noExports.js",
		"/D/Web/Mopus/node_modules/typescript/lib/watchGuard.js",
		"/D/Web/Mopus/tests/fileToExport.js",
		"/D/Web/Mopus/tests/testFolderB/testFolderB.ts",
		"/D/Web/Mopus/tests/testFolderA/index.js",
		"/D/Web/Mopus/tests/testFolderC/index/index.js",
		"/D/Web/Mopus/tests/testFolderB/testFolderB.ejs",
		"/D/Web/Mopus/3.0/package/src/utils/isGlobalModule.js",
		"/D/Web/Mopus/package/src/Options.js",
		"/D/Web/Mopus/package/modules/node-watch/has-native-recursive.js",
		"/D/Web/Mopus/package-lock.json",
		"/D/Web/Mopus/package/modules/node-watch/watch.js",
		"/D/Web/Mopus/package/modules/node-watch/is.js",
		"/D/Web/Mopus/node_modules/node-watch/lib/is.js",
		"/D/Web/Mopus/package/src/Configuration.js",
		"/D/Web/Mopus/node_modules/node-watch/lib/watch.js",
		"/D/Web/Sandbox/capacitor/node_modules/@capacitor/core/README.md",
		"/D/Web/Sandbox/capacitor/node_modules/@capacitor/core/cordova.js",
		"/D/Web/Sandbox/capacitor/node_modules/@capacitor/core/dist/esm/definitions.d.ts",
		"/D/Web/Sandbox/capacitor/node_modules/@capacitor/core/dist/esm/definitions.js",
		"/D/Web/Sandbox/capacitor/node_modules/@capacitor/core/native-bridge.js",
		"/D/Web/Sandbox/capacitor/node_modules/@capacitor/core/dist/capacitor.js",
		"/D/Web/Sandbox/capacitor/node_modules/@capacitor/cli/assets/app-template/www/js/capacitor-welcome.js",
		"/D/Web/Sandbox/capacitor/node_modules/@capacitor/cli/assets/app-template/www/css/style.css",
		"/D/Web/Sandbox/capacitor/package-lock.json",
		"/D/Web/Sandbox/capacitor/node_modules/@capacitor/core/dist/esm/web/camera.js",
		"/D/Web/Sandbox/capacitor/node_modules/@capacitor/core/dist/esm/web/browser.js",
		"/D/Web/Mopus/3.0/package/src/templates/_Mopus.js",
		"/D/Web/Mopus/package/src/constants.js",
		"/D/Web/Mopus/tests/testAst.js",
		"/D/Jeux/Baldur's Gate - Enhanced Edition/scripts/cleric0.BS",
		"/D/Web/Mopus/loaders/mopus-minifier/mopus-minifier.js",
		"/D/Web/Mopus/loaders/mopus-minifier/butternut-for-mopus/butternut.js",
		"/D/Web/Mopus/package/Mopus.js",
		"/D/Web/Mopus/tests/node_modules/butternut/src/index.js",
		"/D/Web/Mopus/package/modules/astring/utils.js",
		"/D/Web/Mopus/package/modules/acorn-dynamic-import/dynamicImport.js",
		"/D/Web/Mopus/package/src/modules.js",
		"/D/Web/Mopus/package/modules/acorn-static-class-fields/staticClassFields.js",
		"/D/Web/Mopus/tests/node_modules/acorn-static-class-features/.eslintrc.json",
		"/D/Web/Mopus/tests/node_modules/astring/dist/astring.js",
		"/D/Web/Mopus/tests/node_modules/falafel/index.js",
		"/D/Web/Mopus/tests/node_modules/acorn-walk/dist/walk.js",
		"/D/Web/Mopus/tests/node_modules/astring/src/astring.js",
		"/D/Web/Mopus/package/modules/astring/index.js",
		"/D/Web/Mopus/package/modules/acorn-class-fields/index.js",
		"/D/Web/Mopus/package/modules/acorn-walk/walk.js",
		"/D/Web/Mopus/package/src/astWalker.js",
		"/D/Web/Mopus/tests/someHeroes.js",
		"/D/Web/Mopus/tests/node_modules/acorn/dist/acorn.js",
		"/D/Web/Mopus/tests/node_modules/butternut/src/program/types/FunctionDeclaration.js",
		"/D/Web/Mopus/tests/node_modules/butternut/src/program/types/ExpressionStatement.js",
		"/D/Web/Mopus/tests/testMinification.js",
		"/D/Web/Mopus/tests/node_modules/butternut/dist/butternut.cjs.js",
		"/D/Web/Mopus/tests/node_modules/magic-string/src/index.js",
		"/D/Web/Mopus/tests/node_modules/magic-string/src/MagicString.js",
		"/D/Web/Mopus/tests/node_modules/isarray/index.js",
		"/D/Web/Mopus/tests/node_modules/butternut/dist/butternut.es.js",
		"/D/Web/Mopus/tests/node_modules/butternut/package.json",
		"/D/Web/Mopus/tests/node_modules/acorn/package.json",
		"/D/Web/Mopus/package/modules/magic-string/index.js",
		"/D/Web/Mopus/3.0/package/src/Config.js",
		"/D/Web/Mopus/tests/node_modules/astring/dist/astring.min.js",
		"/D/Web/Mopus/package/src/Modules.js",
		"/D/Web/Mopus/3.0/package/src/globals.js",
		"/D/Web/Mopus/package/src/truePath.js",
		"/D/Web/Mopus/package/src/MopusSyntaxTree/MopusSyntaxTree.js",
		"/D/Web/Mopus/src/MopusSyntaxTree/MopusSyntaxTree.js",
		"/D/Web/Mopus/tests/adir/anotherfile.js",
		"/D/Web/Mopus/tests/amodule.js",
		"/D/Web/Mopus/package/src/utils/fragments.js",
		"/D/Web/Mopus/package/src/utils/parseExport.js",
		"/D/Web/Mopus/package/src/utils/truePath.js",
		"/D/Web/Mopus/package/src/utils/isGlobalModule.js",
		"/D/Web/Mopus/package/src/globals.js",
		"/D/Web/Mopus/package/src/utils/log.js",
		"/D/Web/Mopus/package/src/importFile.js",
		"/D/Web/Mopus/tests/importCases.js",
		"/D/Web/Mopus/tests/acorn-test.js",
		"/D/Web/Mopus/package/mopus.js",
		"/D/Web/Mopus/package/src/Config.js",
		"/D/Web/Mopus/tests/linkTest.js",
		"/D/Web/Mopus/tests/exportCases.js"
	],
	"find":
	{
		"height": 26.0
	},
	"find_in_files":
	{
		"height": 159.0,
		"where_history":
		[
			"D:\\Web\\Mopus\\package\\src",
			"D:\\Web\\Mopus\\package\\rc",
			"D:\\Web\\Mopus\\package",
			"D:\\Web\\Mopus\\package\\src",
			"D:\\Web\\Mopus\\package",
			"D:\\Web\\Spider\\src",
			"D:\\Web\\Spider\\src\\spiderNodes.js",
			"D:\\Web\\Spider\\src\\parser.js",
			"D:\\Web\\Spider\\src",
			"D:\\Web\\Crafter\\src",
			"D:\\Web\\Crafter-3\\src",
			"D:\\Web\\Crafter-3",
			"D:\\Logiciels\\wamp64\\www\\RideMate",
			"D:\\Logiciels\\wamp64\\www\\RideMate\\images",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"';'",
			"processExports",
			"processImports",
			"source",
			"dirname",
			"const {exports}",
			"links",
			".class",
			"process",
			"addLink",
			"require",
			"getLineInfo",
			"raise",
			"throw",
			"require(action)",
			"addLink",
			"clm",
			"osFilePath",
			"dir",
			"prefix",
			"nodeModules",
			"dirname",
			"truePath(",
			"truePath",
			"localDirnames",
			"__dirname",
			"return",
			"logTimers",
			"logInput",
			"logInputs",
			"logTimers",
			"log",
			"moduleNotFound",
			"wrapProject",
			"moduleNotFound",
			"target",
			"Can't",
			"globalModules",
			"isGlobalModule",
			"default",
			"/!",
			"logErrors",
			"wrapIIFE",
			"mod",
			"parse",
			".truePath",
			"truePath",
			"renderMopusModule",
			"body",
			"timers",
			"entries",
			"logs.",
			"log.",
			"projects",
			"fileName",
			"renderMopusModule",
			"console",
			"globalOptions",
			"chalk",
			"folderRules",
			"folderRule",
			"rules",
			"folderRules",
			"utils",
			"throw",
			"expand",
			"addModule_noCatch",
			"red",
			"rule",
			"mopusTemplate",
			"loadMinifier",
			"acorn",
			"exports.",
			"parser",
			"getSnippet",
			"err",
			"content",
			"moduleNotFound",
			"addLink",
			"cml",
			"cml$",
			"find the module",
			"rules",
			"throw",
			"getLineInfo",
			"throw",
			"Position",
			"getLineInfo",
			"throw",
			"getLineInfo",
			"ScriptModule",
			"dirname",
			"console.log",
			"src",
			"addLink",
			"addModule",
			"defaultRules",
			"action",
			"config",
			"parse",
			"config",
			"Configuration",
			"MOPUS",
			"this",
			"config",
			"rules",
			";\\n",
			";",
			": function",
			"getOwnPropertyDescriptors",
			"ClassFields",
			"classFields",
			"wrap",
			"trueDependencies",
			"truePath",
			"require",
			"path",
			"generateModuleFragments",
			"truePath",
			"trueValue",
			"exportValues",
			"parse",
			"throw",
			"const",
			"template",
			"require",
			"truePath",
			"static"
		],
		"highlight": false,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"wrap",
			"Cannot",
			"entry",
			"options",
			"\n",
			"",
			"output",
			"defaultRules",
			"truePath",
			"osPath",
			" =",
			"this.modules",
			"modus",
			" =",
			"globals.config",
			"global.Mopus.modules",
			"frag",
			"",
			"globalConfig",
			"exportValues",
			"this",
			"ImportExpressions",
			"Expressions",
			"expressions",
			"default",
			"mopString",
			"content",
			"Mopus",
			"shadowValue",
			"Function",
			"newVal",
			"scope",
			"mother",
			"",
			"node",
			"scopeNode",
			"tagEnd",
			"container",
			"conditionScope",
			"D.create",
			"create",
			"createExpressionGetter",
			"land",
			"settle",
			"sml",
			"prodExt",
			"t",
			"ScriptQueue",
			"scriptQueue",
			"prop",
			"alive",
			"spiderQueue",
			"Craft.watchers",
			"finalAttr",
			"getScopedValue",
			"signature",
			"varSign",
			"sign",
			"TypedNodes",
			"init",
			"container",
			"TemplateObject",
			"ScriptQueue",
			"_Template",
			"https://www.ridemate.fr/www/",
			"ride",
			"this",
			"variable.function.js",
			"variable.language.this.js",
			"support.function",
			"infos"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "transform-class-properties/main.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4510,
						"regions":
						{
						},
						"selection":
						[
							[
								1197,
								1197
							]
						],
						"settings":
						{
							"markdonw_live_preview_last_run": 1551291630.31,
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"translate_tabs_to_spaces": false,
							"typescript_plugin_format_options":
							{
								"convertTabsToSpaces": false,
								"indentSize": 4,
								"tabSize": 4
							},
							"use_tab_stops": false
						},
						"translation.x": 0.0,
						"translation.y": 114.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "package/modules/astring/generator.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 24475,
						"regions":
						{
						},
						"selection":
						[
							[
								12796,
								12796
							]
						],
						"settings":
						{
							"markdonw_live_preview_last_run": 1551291630.31,
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"translate_tabs_to_spaces": false,
							"typescript_plugin_format_options":
							{
								"convertTabsToSpaces": false,
								"indentSize": 4,
								"tabSize": 4
							},
							"use_tab_stops": false
						},
						"translation.x": 0.0,
						"translation.y": 554.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "transform-class-properties/test.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 119,
						"regions":
						{
						},
						"selection":
						[
							[
								71,
								71
							]
						],
						"settings":
						{
							"markdonw_live_preview_last_run": 1551291630.31,
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"use_tab_stops": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "tests/cocu.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 839,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"markdonw_live_preview_last_run": 1551291630.47,
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"translate_tabs_to_spaces": false,
							"typescript_plugin_format_options":
							{
								"convertTabsToSpaces": false,
								"indentSize": 4,
								"tabSize": 4
							},
							"use_tab_stops": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "tests/Hero.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1309,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"markdonw_live_preview_last_run": 1551291630.52,
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"translate_tabs_to_spaces": false,
							"typescript_plugin_format_options":
							{
								"convertTabsToSpaces": false,
								"indentSize": 4,
								"tabSize": 4
							},
							"use_tab_stops": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "tests/mopus.json",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 168,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"markdonw_live_preview_last_run": 1551291630.52,
							"syntax": "Packages/JSON Key-Value/JSON Key-Value.tmLanguage",
							"translate_tabs_to_spaces": false,
							"typescript_plugin_format_options":
							{
								"convertTabsToSpaces": false,
								"indentSize": 4,
								"tabSize": 4
							}
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				}
			]
		},
		{
			"selected": 3,
			"sheets":
			[
				{
					"buffer": 6,
					"file": "package/src/Project.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6294,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"SL.132.region_keys":
							[
							],
							"markdonw_live_preview_last_run": 1551291630.52,
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"translate_tabs_to_spaces": false,
							"typescript_plugin_format_options":
							{
								"convertTabsToSpaces": false,
								"indentSize": 4,
								"tabSize": 4
							},
							"use_tab_stops": false
						},
						"translation.x": 0.0,
						"translation.y": 138.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "package/src/Module.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4537,
						"regions":
						{
						},
						"selection":
						[
							[
								972,
								972
							]
						],
						"settings":
						{
							"markdonw_live_preview_last_run": 1551291630.52,
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"translate_tabs_to_spaces": false,
							"typescript_plugin_format_options":
							{
								"convertTabsToSpaces": false,
								"indentSize": 4,
								"tabSize": 4
							},
							"use_tab_stops": false
						},
						"translation.x": 0.0,
						"translation.y": 20.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "package/src/astHandler.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6255,
						"regions":
						{
						},
						"selection":
						[
							[
								1184,
								1189
							]
						],
						"settings":
						{
							"markdonw_live_preview_last_run": 1551291630.52,
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"translate_tabs_to_spaces": false,
							"typescript_plugin_format_options":
							{
								"convertTabsToSpaces": false,
								"indentSize": 4,
								"tabSize": 4
							},
							"use_tab_stops": false
						},
						"translation.x": 0.0,
						"translation.y": 1714.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "tests/node_modules/astring/src/astring.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 28029,
						"regions":
						{
						},
						"selection":
						[
							[
								7809,
								7812
							]
						],
						"settings":
						{
							"markdonw_live_preview_last_run": 1551291630.3,
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": false,
							"typescript_plugin_format_options":
							{
								"convertTabsToSpaces": false,
								"indentSize": 4,
								"tabSize": 4
							},
							"use_tab_stops": false
						},
						"translation.x": 0.0,
						"translation.y": 3951.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 10,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 641,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions":
								[
									[
										192,
										207
									],
									[
										533,
										548
									]
								],
								"scope": ""
							}
						},
						"selection":
						[
							[
								542,
								542
							]
						],
						"settings":
						{
							"detect_indentation": false,
							"line_numbers": false,
							"markdonw_live_preview_last_run": 1551291630.52,
							"output_tag": 2,
							"result_base_dir": "",
							"result_file_regex": "^([^ \t].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 181.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 26.0
	},
	"input":
	{
		"height": 97.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				1,
				0,
				2,
				1
			]
		],
		"cols":
		[
			0.0,
			0.5,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": false,
	"output.SublimeLinter":
	{
		"height": 0.0
	},
	"output.doc":
	{
		"height": 0.0
	},
	"output.exec":
	{
		"height": 157.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "Mopus.sublime-project",
	"replace":
	{
		"height": 48.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"ridema.js",
				"js\\RideMap.js"
			],
			[
				"ridema",
				"images\\RideMate-logo-dark.svg"
			],
			[
				"rideinf",
				"components\\rideInfos.component"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"D:\\Web\\Nixy\\Nixy.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 392.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"settle",
				"settle"
			],
			[
				"templateA",
				"templateArrayModel"
			],
			[
				"clone",
				"clone"
			],
			[
				"model",
				"model"
			],
			[
				"weave",
				"weave"
			]
		],
		"width": 641.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 293.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
